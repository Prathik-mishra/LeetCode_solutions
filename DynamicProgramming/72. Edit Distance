class Solution {
    public int minDistance(String word1, String word2) {
        // return recur(word1,word2,0,0);
        // int[][] dp = new int[word1.length()][word2.length()];
        // for(int i=0; i<word1.length(); i++){
        //     Arrays.fill(dp[i],-1);
        // }
        // return memo(word1,word2,0,0,dp);
        return tab(word1,word2);
    }
    
    private int recur(String word1, String word2, int i, int j){
        if(j == word2.length() && i < word1.length()){
            return word1.length() - i;
        }
        if(j == word2.length() && i == word1.length()){
            return 0;
        }
        if(j < word2.length() && i == word1.length()){
            return word2.length() - j;
        }
        if(word1.charAt(i) == word2.charAt(j)){
            return recur(word1,word2,i+1,j+1);
        }else{
            int insert = recur(word1,word2,i,j+1);
            
            int delete = recur(word1,word2,i+1,j);
            
            int replace = recur(word1,word2,i+1,j+1);
                
            return 1 + Math.min(insert,Math.min(delete,replace));
        }
    }
    
    private int memo(String word1, String word2, int i, int j, int[][] dp){
        if(j == word2.length() && i < word1.length()){
            return word1.length() - i;
        }
        if(j == word2.length() && i == word1.length()){
            return 0;
        }
        if(j < word2.length() && i == word1.length()){
            return word2.length() - j;
        }
        
        if(dp[i][j] != -1) return dp[i][j];
        
        if(word1.charAt(i) == word2.charAt(j)){
            return memo(word1,word2,i+1,j+1,dp);
        }else{
            int insert = memo(word1,word2,i,j+1,dp);
            
            int delete = memo(word1,word2,i+1,j,dp);
            
            int replace = memo(word1,word2,i+1,j+1,dp);
                
            return dp[i][j] = 1 + Math.min(insert,Math.min(delete,replace));
        }
    }
    
    private int tab(String word1, String word2){
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n+1][m+1];
        
        for(int i=n; i>=0; i--){
            for(int j=m; j>=0; j--){
                if(j == word2.length() && i < word1.length()){
                    dp[i][j] = word1.length() - i;
                    continue;
                }
                if(j == word2.length() && i == word1.length()){
                    dp[i][j] = 0;
                    continue;
                }
                if(j < word2.length() && i == word1.length()){
                    dp[i][j] = word2.length() - j;
                    continue;
                }

                if(word1.charAt(i) == word2.charAt(j)){
                    dp[i][j] = dp[i+1][j+1]; //memo(word1,word2,i+1,j+1,dp);
                }else{
                    int insert = dp[i][j+1]; //memo(word1,word2,i,j+1,dp);

                    int delete = dp[i+1][j]; //memo(word1,word2,i+1,j,dp);

                    int replace = dp[i+1][j+1]; //memo(word1,word2,i+1,j+1,dp);

                    dp[i][j] = 1 + Math.min(insert,Math.min(delete,replace));
                }
            }
        }
        
        return dp[0][0];
    }
}
